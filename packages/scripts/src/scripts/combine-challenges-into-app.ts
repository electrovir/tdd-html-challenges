import {capitalizeFirstLetter} from 'augment-vir';
import {readdir, writeFile} from 'fs/promises';
import {actualChallengeFilesDirPath, allChallengesFilePath} from '../file-paths';

async function getAllChallengeFileNames(): Promise<string[]> {
    const allFilesInChallengesDir = await readdir(actualChallengeFilesDirPath);
    const challengeElementFileNames = allFilesInChallengesDir.filter((fileName) => {
        return fileName.endsWith('.element.ts');
    });

    return challengeElementFileNames;
}

async function combineAllChallengeFileNames(): Promise<string> {
    const challengeFileNames = await getAllChallengeFileNames();

    const importLines: string[] = challengeFileNames.map(createChallengeImportString);
    const definitionStrings: string[] = challengeFileNames.map(createChallengeFileString);

    return `${fileBeginningString}${importLines.join(
        '\n',
    )}${fileMiddleString}${definitionStrings.join('')}${fileEndingString}`;
}

function createChallengeImportString(challengeFileName: string): string {
    const {elementName} = getDateAndElementNameFromFileName(challengeFileName);
    return `import {${elementName}} from '../challenges/${challengeFileName.replace(
        /\.ts$/,
        '',
    )}';`;
}

function createChallengeFileString(challengeFileName: string): string {
    const {elementName, dateString} = getDateAndElementNameFromFileName(challengeFileName);
    return `
    {
        element: ${elementName},
        date: new Date('${dateString}'),
    },`;
}

function getDateAndElementNameFromFileName(elementFileName: string): {
    dateString: string;
    elementName: string;
} {
    const dashedElementName = elementFileName.replace('.element.ts', '');
    const elementName = capitalizeFirstLetter(dashedElementName.replace(/-/g, '_'));
    return {
        elementName,
        dateString: dashedElementName.replace('vir-', ''),
    };
}

const fileBeginningString: string = "import {FunctionalElement} from 'element-vir';\n";

const fileMiddleString: string = `

/**
 * This file is automatically generated by the combine-challenges-into-app.ts script. If you edit
 * this manually, it will ger overwritten!
 */

export type ChallengeDefinition = {
    element: FunctionalElement;
    date: Date;
};

export const allChallenges: readonly Readonly<ChallengeDefinition>[] = [`;

const fileEndingString: string = `
] as const;
`;

async function overwriteAllChallenges() {
    const output = await combineAllChallengeFileNames();
    await writeFile(allChallengesFilePath, output);
}

if (require.main === module) {
    overwriteAllChallenges().catch((error) => {
        console.error(error);
        process.exit(1);
    });
}
